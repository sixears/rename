module Rename.Options
  ( MkDirs(..), Options(..), Quiet(..), ReplacementOpt(..)
  , inputs, mkdirs, overwr, parseOptions, quiet, repl_opt )
where

import Base1T

-- fpath -------------------------------

import FPath.File       ( File )
import FPath.Parseable  ( readM )

-- optparse-applicative ----------------

import Options.Applicative.Builder  ( argument, eitherReader, flag, help, long
                                    , metavar, short, strOption )
import Options.Applicative.Types    ( Parser )

-- optparse-plus -----------------------

import OptParsePlus  ( parsecReader, parseNE, textualOption )

-- pcre --------------------------------

import PCRE              ( compRE )
import PCRE.Error        ( REParseError )
import PCRE.REPlacement  ( REPlacement( REPlacement ) )
import PCRE.ReplText     ( ReplText )

-- regex-with-pcre ---------------------

import Text.RE.PCRE.Text  ( RE )

-- stdmain -----------------------------

import StdMain  ( Overwrite( NoOverwrite, Overwrite ) )

-- text --------------------------------

import Data.Text  ( pack )

--------------------------------------------------------------------------------

data MkDirs = MkDirs | NoMkDirs
  deriving (Eq,Show)

------------------------------------------------------------

data Quiet = NoQuiet | Quiet
  deriving (Eq,Show)

------------------------------------------------------------

data ReplacementOpt = ROptRepl   REPlacement
                    | ROptREName ùïã
                    | ROptFile1  File
                    | ROptFileN  File
  deriving Show

------------------------------------------------------------

data Options = Options { _repl_opt ‚à∑ ReplacementOpt
                       , _inputs   ‚à∑ NonEmpty File
                       , _mkdirs   ‚à∑ MkDirs
                       , _overwr   ‚à∑ Overwrite
                       , _quiet    ‚à∑ Quiet
                       }
  deriving Show

--------------------

inputs ‚à∑ Lens' Options (NonEmpty File)
inputs = lens _inputs (\ o is ‚Üí o { _inputs = is })

--------------------

repl_opt ‚à∑ Lens' Options ReplacementOpt
repl_opt = lens _repl_opt (\ o rp ‚Üí o { _repl_opt = rp })

--------------------

mkdirs ‚à∑ Lens' Options MkDirs
mkdirs = lens _mkdirs (\ o m ‚Üí o { _mkdirs = m })

--------------------

overwr ‚à∑ Lens' Options Overwrite
overwr = lens _overwr (\ o w ‚Üí o { _overwr = w })

--------------------

quiet ‚à∑ Lens' Options Quiet
quiet = lens _quiet (\ o q ‚Üí o { _quiet = q })

------------------------------------------------------------

parseReplText ‚à∑ Parser ReplText
parseReplText = argument parsecReader (metavar "REPLACEMENT")

parseRE ‚à∑ Parser RE
parseRE = argument (eitherReader (first toString ‚àò compRE @REParseError ‚àò pack))
                   (metavar "REGEX")

parseREPlacement ‚à∑ Parser REPlacement
parseREPlacement = REPlacement ‚ä≥ parseRE ‚äµ parseReplText

parseReplacementOpt ‚à∑ Parser ReplacementOpt
parseReplacementOpt =
    ROptRepl ‚ä≥ parseREPlacement
  ‚à§ ROptREName ‚ä≥ (pack ‚ä≥ strOption (—é [ short 'n', long "name", metavar "REName"
                                      , help "select this named RE from re file"
                                      ]))
  ‚à§ ROptFile1 ‚ä≥ (textualOption (—é [ short 'f', long "file1"
                                  , help "use 1 RE from this file" ]))
  ‚à§ ROptFileN ‚ä≥ (textualOption (—é [ short 'F', long "file-many"
                                  , help "use many REs from this file" ]))

parseOptions ‚à∑ Parser Options
parseOptions =
  Options ‚ä≥ parseReplacementOpt
          ‚äµ parseNE (argument readM (metavar "FILENAME"))
          ‚äµ flag NoMkDirs MkDirs (—é [ short 'M', long "mkdirs"
                                    , help "make missing directories" ])
          ‚äµ flag NoOverwrite Overwrite (—é [ short 'O', long "overwrite"
                                          , help "overwrite extant files" ])
          ‚äµ flag NoQuiet Quiet (—é [ short 'q', long "no-output"
                                  , help "don't output file moves" ])

-- that's all, folks! ----------------------------------------------------------
